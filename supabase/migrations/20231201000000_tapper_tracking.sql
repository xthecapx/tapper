-- Drop the existing todos table if it exists
drop table if exists todos;

-- Create users table for display names
create table users (
  id uuid references auth.users primary key,
  email text unique not null,
  name text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create tapper_logs table
create table tapper_logs (
  id bigint generated by default as identity primary key,
  user_id uuid references users(id) not null,
  log_date date not null,
  is_tapper boolean default false,
  logged_by uuid references users(id) not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id, log_date)
);

-- Enable RLS
alter table users enable row level security;
alter table tapper_logs enable row level security;

-- Users policies (everyone can read, users can update their own profile)
create policy "Everyone can view users" on users for select using (true);
create policy "Users can insert their own profile" on users for insert with check (auth.uid() = id);
create policy "Users can update their own profile" on users for update using (auth.uid() = id);

-- Tapper logs policies (everyone can read and create logs)
create policy "Everyone can view tapper logs" on tapper_logs for select using (true);
create policy "Everyone can create tapper logs" on tapper_logs for insert with check (true);
create policy "Everyone can update tapper logs" on tapper_logs for update using (true);

-- Function to automatically create user profile on signup
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.users (id, email, name)
  values (new.id, new.email, coalesce(new.raw_user_meta_data->>'name', split_part(new.email, '@', 1)));
  return new;
end;
$$ language plpgsql security definer;

-- Trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Create a function to handle updated_at timestamp
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql;

-- Create trigger for updated_at on tapper_logs
create trigger handle_updated_at before update on tapper_logs
  for each row execute procedure handle_updated_at(); 